use cudarc::driver::sys::*; /* Hack :3 */
use gl::types::{GLenum, GLuint};
/* automatically generated by rust-bindgen 0.70.1 */

pub struct Lib {
	__library: ::libloading::Library,
	pub cuGraphicsGLRegisterBuffer: Result<
		unsafe extern "C" fn(
			pCudaResource: *mut CUgraphicsResource,
			buffer: GLuint,
			Flags: ::core::ffi::c_uint,
		) -> CUresult,
		::libloading::Error,
	>,
	pub cuGraphicsGLRegisterImage: Result<
		unsafe extern "C" fn(
			pCudaResource: *mut CUgraphicsResource,
			image: GLuint,
			target: GLenum,
			Flags: ::core::ffi::c_uint,
		) -> CUresult,
		::libloading::Error,
	>,
}
impl Lib {
	pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
	where
		P: AsRef<::std::ffi::OsStr>,
	{
		let library = ::libloading::Library::new(path)?;
		Self::from_library(library)
	}
	pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
	where
		L: Into<::libloading::Library>,
	{
		let __library = library.into();
		let cuGraphicsGLRegisterBuffer = __library
			.get(b"cuGraphicsGLRegisterBuffer\0")
			.map(|sym| *sym);
		let cuGraphicsGLRegisterImage = __library
			.get(b"cuGraphicsGLRegisterImage\0")
			.map(|sym| *sym);
		Ok(Lib {
			__library,
			cuGraphicsGLRegisterBuffer,
			cuGraphicsGLRegisterImage,
		})
	}
	pub unsafe fn cuGraphicsGLRegisterBuffer(
		&self,
		pCudaResource: *mut CUgraphicsResource,
		buffer: GLuint,
		Flags: ::core::ffi::c_uint,
	) -> CUresult {
		(self
			.cuGraphicsGLRegisterBuffer
			.as_ref()
			.expect("Expected function, got error."))(pCudaResource, buffer, Flags)
	}
	pub unsafe fn cuGraphicsGLRegisterImage(
		&self,
		pCudaResource: *mut CUgraphicsResource,
		image: GLuint,
		target: GLenum,
		Flags: ::core::ffi::c_uint,
	) -> CUresult {
		(self
			.cuGraphicsGLRegisterImage
			.as_ref()
			.expect("Expected function, got error."))(pCudaResource, image, target, Flags)
	}
}
